#version 330 core
in vec3 FragPos; // Position of the fragment (for lighting)
in vec3 Normal; // Normal at the fragment (for lighting)
in float ChromoIDFragment; // Chromosome ID

uniform vec3 lightPos; // Position of the light source
uniform vec3 viewPos; // Position of the camera (viewer)

out vec4 color;

void main() {
    // Set the base color based on the chromosome ID
    vec3 baseColor;
    if (ChromoIDFragment == 1.0) {
        baseColor = vec3(1.0, 0.0, 0.0); // Red for chromosome 1
    } else if (ChromoIDFragment == 2.0) {
        baseColor = vec3(0.0, 1.0, 0.0); // Green for chromosome 2
    } else {
        baseColor = vec3(0.0, 0.0, 1.0); // Blue for chromosome 3
    }

    // Ambient lighting
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * baseColor;

    // Diffuse lighting
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * baseColor;

    // Specular lighting
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * vec3(1.0, 1.0, 1.0); // Assuming white specular color

    // Combine results
    vec3 result = ambient + diffuse + specular;
    color = vec4(result, 1.0);
}
